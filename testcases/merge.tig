let 

 typedef {any : int} any
 var buffer := getchar()

int readint(any: any) {
 let var i := 0
     int isdigit(s : string) {
		  ord(buffer)>=ord("0") & ord(buffer)<=ord("9")
     }
     void skipto() {
       while buffer=" " | buffer="\n"
         do buffer := getchar()
     }
  in skipto();
     any.any := isdigit(buffer);
     while isdigit(buffer)
       do (i := i*10+ord(buffer)-ord("0"); buffer := getchar());
     i
  end
 }

 typedef {first: int, rest: list} list

 list readlist() {
    let var any := any{any=0}
        var i := readint(any)
     in if any.any
         then list{first=i,rest=readlist()}
         else nil
    end
 }

 list merge(a: list, b: list) {
   if a=nil then b
   else if b=nil then a
   else if a.first < b.first 
      then list{first=a.first,rest=merge(a.rest,b)}
      else list{first=b.first,rest=merge(a,b.rest)}
 }

 void printint(i: int) {
  let void f(i:int) {
          if i>0 
	     then (f(i/10); print(chr(i-i/10*10+ord("0"))))
      }
   in if i<0 then (print("-"); f(-i))
      else if i>0 then f(i)
      else print("0")
  end
 }

 void printlist(l: list) {
   if l=nil then print("\n")
   else (printint(l.first); print(" "); printlist(l.rest))
 }

   var list1 := readlist()
   var list2 := (buffer:=getchar(); readlist())


  /* BODY OF MAIN PROGRAM */
 in printlist(merge(list1,list2))
end

